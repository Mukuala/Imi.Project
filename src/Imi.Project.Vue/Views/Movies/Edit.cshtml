@model int
<div class="row" id="app">
    <div class="col-sm-6 text-black">
        <h1>Edit {{movie.name}}</h1>

        <form style="width: 50rem;" v-on:submit.prevent="submitForm">
            <div class="form-group">
                <label>Name</label>
                <input type="text" class="form-control" v-model="form.name" required />
            </div>
            <div class="form-group">
                <label>Description</label>
                <textarea class="form-control" v-model="form.description" required></textarea>
            </div>
            <div class="form-group">
                <label>Duration</label>
                <input type="number" class="form-control" v-model="form.duration" required />
            </div>
            <div class="form-group">
                <label>Rating</label>
                <input type="number" step="0.1" class="form-control" v-model="form.averageRating" required />
            </div>
            <div class="form-group">
                <label>Release Date</label>
                <input type="date" class="form-control" v-model="form.releaseDate" required />
            </div>
            <div class="form-group">
                <label>Embed Trailer Url</label>
                <input type="url" class="form-control" v-model="form.embeddedTrailerUrl" />
            </div>
            <div class="form-group">
                <label>Image</label>
                <input id="imageFile" type="file" style="background-color:wheat" class="form-control" accept="image/png, image/gif, image/jpeg" />
            </div>
            <div class="form-group">
                <label>Actor(s)</label><br />

                <div class="form-check form-check-inline" v-for="actor in actors">
                    <input class="form-check-input" :name="actor.name" type="checkbox" :id="actor.name" v-model="form.actorsId" :value="actor.id" />
                    <label class="form-check-label" :for="actor.name">{{actor.name}}</label>
                </div>
            </div>
            <div class="form-group">
                <label>Genre(s)</label><br />
                <div class="form-check form-check-inline" v-for="genre in genres">
                    <input class="form-check-input" :name="genre.name" type="checkbox" :id="genre.name" v-model="form.genresId" :value="genre.id" />
                    <label class="form-check-label" :for="genre.name">{{genre.name}}</label>
                </div>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>

        </form>
    </div>
</div>

<script>
    var formData = new FormData();
    var jwtToken = window.localStorage.getItem('jwtToken');
    const config = {
        headers: {
            Authorization: `Bearer ${jwtToken}`
        }
    };
    var apiURL = 'https://localhost:5001/api/Movies/'
    var actorApiUrl = 'https://localhost:5001/api/Actors/'
    var genreApiUrl = 'https://localhost:5001/api/Genres/'
    var app = new Vue({
        el: '#app',
        data: {
            movie: {},
            image: null,
            form: {
                name: '',
                description: '',
                duration: 0,
                embeddedTrailerUrl: '',
                releaseDate: null,
                averageRating: 0,
                actorsId: [],
                genresId: []
            },
            movieId: @Model,
            genres: null,
            actors: null
        },
        created: function () {
            var self = this;
            self.fetchActors();
            self.fetchGenres();
            self.fetchMovie();
        },
        methods: {
            submitForm: async function () {

                await axios.put(apiURL, this.form, config)
                    .then(response => {
                        this.image = document.getElementById('imageFile').files[0];
                        formData.append("image", this.image);

                        if (this.image == null) {
                            setTimeout(ReturnToMovie(this.movieId), 500);
                        }
                    }).catch(function (error) {
                        console.log(error)
                        alert(error);
                    });
                if (this.movieId != 0 && this.image != null) {
                    async function imgUpload(id) {
                        console.log(apiURL + id + "/image", this.image);
                        await axios
                            .post(apiURL + id + "/image", formData, config)
                            .catch(function (error) {
                                console.log(JSON.stringify(error));
                                alert(error);
                            });
                    };
                    imgUpload(this.movieId);
                    setTimeout(ReturnToMovie(this.movieId), 500);
                }


            },
            fetchGenres: async function () {
                await axios.get(genreApiUrl).then(response => this.genres = response.data);
            },
            fetchActors: async function () {
                await axios.get(actorApiUrl).then(response => this.actors = response.data);
            },
            fetchMovie: async function () {
                await axios.get(apiURL +@Model).then(response => {
                    this.movie = response.data;
                    this.form.name = response.data.name;
                    this.form.description = response.data.description;
                    this.form.releaseDate = response.data.releaseDate;
                    this.form.averageRating = response.data.averageRating;
                    this.form.duration = response.data.duration;
                    this.form.embeddedTrailerUrl = response.data.embeddedTrailerUrl;
                })
            }
        }
    });
    function ReturnToMovie(movieId) {
        window.location.href = 'https://localhost:5005/movies/detail/' + movieId;
    }
</script>
