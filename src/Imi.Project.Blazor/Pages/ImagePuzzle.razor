@using Plk.Blazor.DragDrop;
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor.Layouts
@using Imi.Project.Blazor.Models
@using Imi.Project.Blazor.Services.Puzzle
@page "/puzzle"
<div class="container text-center">
    <h3>Image Puzzle</h3>
    @if (showPlaybtn)
    {
        <button style="margin:30px" class="btn btn-success" @onclick="(()=>StartPlaying())"> PLAY</button>
    }
    @if (showRetrybtn)
    {
        <button style="margin:30px" @onclick="(()=>StartPlaying())" class="btn btn-danger">RETRY</button>
    }
    @if (showNextbtn)
    {
        <button style="margin:30px" @onclick="(()=>StartPlaying())" class="btn btn-secondary">NEXT</button>
    }

    @if (showPuzzle)
    {
        <h3>@CurrentPuzzle/@AmountOfPuzzles</h3>
        <div id="puzzle">
            <h4 class="font-weight-bold">Time : @counter</h4>
            <Dropzone Class="grid-container" Items="ImagePiecesList" TItem="ImagePiece" InstantReplace OnItemDrop="@((p)=>OnImagePieceDrop(p))">
                <div class="grid-item" id="puz_@context.Id">
                    <img src="@context.Url" class="img-fluid" style="max-height:fit-content" alt="@context.Name" />
                </div>
            </Dropzone>
        </div>
    }

</div>

@code {
    Random rnd = new Random();
    public List<string> correctList = new List<string> { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16" };   
    public List<string> currentPuzzleList = new List<string>();
    public List<string> ImageNames = PuzzleService.GetImageNames().OrderBy(a => Guid.NewGuid()).ToList();
    List<ImagePiece> ImagePiecesList = new List<ImagePiece>();

    public bool showPlaybtn = true;
    public bool showPuzzle = false;
    public bool showRetrybtn = false;
    public bool showNextbtn = false;

    private static System.Timers.Timer Timer;
    private int counter = 60;
    private int AmountOfPuzzles = PuzzleService.PuzzleImagesAmount;
    private int CurrentPuzzle = 1;

    protected override void OnParametersSet()
    {
        if (Timer != null)
        {
            Timer.Stop();
        }
    }


    public async Task OnImagePieceDrop(ImagePiece imagePiece)
    {
        currentPuzzleList = await JSRuntime.InvokeAsync<List<string>>("UpdateList");
        if (currentPuzzleList.SequenceEqual(correctList))
        {
            showNextbtn = true;
            Timer.Stop();
            showPuzzle = false;
            CurrentPuzzle++;
            await JSRuntime.InvokeVoidAsync("Solved");
        }
        if (CurrentPuzzle - 1 == AmountOfPuzzles)
        {
            showNextbtn = false;
            showPlaybtn = true;
            await JSRuntime.InvokeVoidAsync("SolvedAll");
        }
    }

    public void StartPlaying()
    {
        counter = 60;
        showPuzzle = true;

        if (!showRetrybtn)
        {
            if (!showNextbtn)
            {
                CurrentPuzzle = 1;
            }

            showPlaybtn = false;
            showNextbtn = false;
            var imageName = ImageNames[CurrentPuzzle - 1];
            ImagePiecesList = PuzzleService.GetImagePieces(imageName).OrderBy(a => rnd.Next()).ToList();
        }

        ImagePiecesList = ImagePiecesList.OrderBy(a => rnd.Next()).ToList();
        showRetrybtn = false;

        Timer = new System.Timers.Timer(1000);
        Timer.Elapsed += CountDownTimer;
        Timer.Start();
    }

    public async void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
        }
        DoStuff();

        await InvokeAsync(StateHasChanged);
    }

    public void DoStuff()
    {
        if (counter <= 0)
        {
            showRetrybtn = true;
            showPuzzle = false;
            Timer.Stop();
            counter = 60;
            JSRuntime.InvokeVoidAsync("TimeOut");
        }
    }
}
