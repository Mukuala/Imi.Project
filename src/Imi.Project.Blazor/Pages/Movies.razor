@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Imi.Project.Blazor.Components
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@page "/"
@page "/movies"
@page "/movies/{movieId:int}"
@page "/movies/{action}"
@page "/movies/{action}/{movieId:int}"

@* Show all movies *@
@if (Action == null && movie == null && MovieId == 0)
{
    <h2>Hello Admin @user.FirstName @user.LastName</h2>

    <a style="margin:30px" href="/movies/create" class="btn btn-primary">Add new movie</a>

    <MoviesList Movies="movies"/>
}

@* Show moviedetail *@
@if (Action == null && movie != null && MovieId != 0)
{
    <MovieDetail Model="movie"
                 OpenDialog="OpenDialog"
                 CloseDialog="CloseDialog"
                 ConfirmDelete="ConfirmDelete"
                 IsVisible="IsVisible"/>
}

@* Show create/edit page *@
else if (Action == "create" || Action == "edit" && movieRequest != null)
{

    <EditForm Model="@movieRequest" OnValidSubmit="SaveMovie">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="name">Name: </label>
            <InputText id="name" @bind-Value="movieRequest.Name" class="form-control"></InputText>
            <ValidationMessage For="@(() =>movieRequest.Name)" />
        </div>
        <div class="form-group">
            <label for="description">Description: </label>
            <InputTextArea id="description" @bind-Value="movieRequest.Description" class="form-control"></InputTextArea>
            <ValidationMessage For="@(() =>movieRequest.Description)" />
        </div>
        <div class="form-group">
            <label for="duration">Duration: </label>
            <InputNumber id="duration" @bind-Value="movieRequest.Duration" class="form-control"></InputNumber>
            <ValidationMessage For="@(() =>movieRequest.Duration)" />
        </div>
        <div class="form-group">
            <label for="rating">Rating: </label>
            <Syncfusion.Blazor.Inputs.SfNumericTextBox Decimals="1" Max="10" Min="0" id="rating" @bind-Value="movieRequest.AverageRating" class="form-control"></Syncfusion.Blazor.Inputs.SfNumericTextBox>
            <ValidationMessage For="@(() =>movieRequest.AverageRating)" />
        </div>
        <div class="form-group">
            <label for="releaseDate">ReleaseDate: </label>
            <InputDate id="releaseDate" @bind-Value="movieRequest.ReleaseDate" class="form-control"></InputDate>
            <ValidationMessage For="@(() =>movieRequest.ReleaseDate)" />
        </div>
        <div class="form-group">
            <label for="image">Image: </label>
            <SfUploader AllowMultiple="false">
                <UploaderEvents ValueChange="ImageAdd"></UploaderEvents>
            </SfUploader>
        </div>
        <div class="form-group">
            <label for="actors">Actor(s): </label>
            <SfMultiSelect id="actors" TValue="List<int>" TItem="ActorResponseDto" @bind-Value="actorsId" DataSource="@actors" AllowFiltering="true" Placeholder="Choose Actors..." class="form-control">
                <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
                <MultiSelectEvents TItem="ActorResponseDto" TValue="List<int>" Closed="OnActorsValueChanged"></MultiSelectEvents>
            </SfMultiSelect>
        </div>
        <div class="form-group">
            <label for="genres">Genre(s): </label>
            <SfMultiSelect id="genres" @bind-Value="genresId" DataSource="@genres" AllowFiltering="true" Placeholder="Choose Genres..." class="form-control">
                <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
                <MultiSelectEvents TItem="GenreResponseDto" TValue="List<int>" Closed="OnGenresValueChanged"></MultiSelectEvents>
            </SfMultiSelect>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </EditForm>
}


@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetJwtToken();
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task GetJwtToken()
    {
        var responseDto = await movieService.LogInGetJwtToken();
        await localStorage.SetItemAsync("JwtToken", responseDto.JwtToken);
        storedToken = await localStorage.GetItemAsync<string>("JwtToken");
        user = await movieService.GetJwtUserProfile(storedToken);
    }

    //ShowDialog
    private bool IsVisible { get; set; } = false;

    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void CloseDialog()
    {
        this.IsVisible = false;
    }

    private async Task ConfirmDelete()
    {
        await DeleteMovie(movie);
        CloseDialog();
    }

    //ImageUpload
    private void ImageAdd(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            imgByteArray = file.Stream.ToArray();
            imageName = file.FileInfo.Name;
        }
        if (args.Files.Count == 0)
        {
            imgByteArray = null;
            imageName = null;
        }
    }
    //Multiselect

    private List<int> actorsId = new List<int>();

    private List<int> genresId = new List<int>();

    private void OnActorsValueChanged()
    {
        movieRequest.ActorsId = actorsId;
    }
    private void OnGenresValueChanged()
    {
        movieRequest.GenresId = genresId;
    }

}
